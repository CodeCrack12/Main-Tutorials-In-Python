#   STATIC METHODS :

# Static Methods are created when we need not any instance method of the class.

# Static method are not necessarily to be called on object reference.

# Static method are like normal functions created inside the class in order to ship that method
# with the class.

# They are defined using the @staticmethod decorator and do not have access to the instance stuff.
# i.e : instance method and instance variables.

#

class Math:
    @staticmethod
    def add(a, b):
        return a + b


m = Math()

print(m.add(1, 2))
print(Math.add(1, 2))


# The method can be called on the class itself, without the need to create an instance of the
# class. Or by the instance ( object reference ).

#      SELF - KEYWORD USE :

class Self_Keyword:

    def name(self, n):
        print(n)


s = Self_Keyword()
s.name("Haroon")
Self_Keyword.name(s, "Haroon")


# The above two ways to call a function indicates the importance of self coz inplace of self,
# the instance(or object reference)is passed by which the method is called.

# When the function is called like s.name("Haroon"), it is converted ito Self_Keyword.name(s, "Haroon")


#    CLASS VARIABLES AND INSTANCE VARIABLES :

#  Variables can be defined at the class level or at the instance level.

#  Class variables are defined at the class level and are shared among all instances
#  of the class. Changing the class variable's value using Class.class_variable syntax actually
#  changes the class variable while object_reference.class_variable don't actually change the class
#  rather it creates a new instance variable while object_reference.instance_variable changes
#  the variable as long s the variable is called upon the present object reference. Changing an
#  instance variable by Class.instance_variable = "Something" is not possible.

#   Class_variables are defined outside any method and are usually used to store information
#   that is common to all instances of the class.

#   Instance variables are defined at the instance level and are unique to each instance
#   of the class.
class Animals:
    animal_kingdom = "Animalia"

    def __init__(self, c, d, e, f):
        self.eyes_diameter_dog = d
        self.color_dog = f
        self.color_cat = e
        self.eyes_diameter_cat = c

    def cat(self):
        print(f"{self.color_cat} cat has {self.eyes_diameter_cat} inch diameter eyes belongs to "
              f"Kingdom {self.animal_kingdom}")

    def dog(self):
        print(f"{self.color_dog} dog has {self.eyes_diameter_dog} inch diameter eyes belongs to "
              f"Kingdom {self.animal_kingdom}")


an = Animals(0.5, 0.6, "Black", "Brown")
an.color_cat = "Blue"
an.animal_kingdom = "Homosapiens"
an.cat()


bn = Animals(0.5, 0.6, "Black", "Brown")
bn.animal_kingdom = "Primates"
bn.dog()
print("\n\n")
print(dir(bn))
print(dir(Animals))
print(dir(an))

# Conclusion :

# Class Variables store common stuff while instance variable store non-common stuff.
